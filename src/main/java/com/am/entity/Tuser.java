package com.am.entity;
// Generated 20 nov. 2018 18:53:33 by Hibernate Tools 5.1.7.Final

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.am.security.Authority;
import com.fasterxml.jackson.annotation.JsonIgnore;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
/**
 * Tuser generated by hbm2java
 */
@Entity
@Table(name = "tuser", catalog = "projectmanagement")
public class Tuser implements UserDetails,java.io.Serializable {

	private Integer iduser;
	private Tperson tperson;
	private String loginuser;
	@JsonIgnore
	private String pwduser;
	private int enableduser;
	@JsonIgnore
	private Set<Tuserrole> tuserroles=new HashSet<Tuserrole>(0);
	
	public Tuser() {
		
	}

	public Tuser(Tperson tperson, int enableduser) {
		this.tperson = tperson;
		this.enableduser = enableduser;
	}

	public Tuser(Tperson tperson, String loginuser, String pwduser, int enableduser) {
		this.tperson = tperson;
		this.loginuser = loginuser;
		this.pwduser = pwduser;
		this.enableduser = enableduser;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "iduser", unique = true, nullable = false)
	
	public Integer getIduser() {
		return this.iduser;
	}

	public void setIduser(Integer iduser) {
		this.iduser = iduser;
	}

	@ManyToOne(fetch = FetchType.LAZY,cascade=CascadeType.PERSIST)
	@JoinColumn(name = "idperson", nullable = false)
	@JsonIgnore
	public Tperson getTperson() {
		return this.tperson;
	}


	public void setTperson(Tperson tperson) {
		this.tperson = tperson;
		//tperson.getTusers().add(this);
	}

	@Column(name = "loginuser", length = 30)
	public String getLoginuser() {
		return this.loginuser;
	}

	public void setLoginuser(String loginuser) {
		this.loginuser = loginuser;
	}

	@Column(name = "pwduser", length = 120)
	public String getPwduser() {
		return this.pwduser;
	}

	public void setPwduser(String pwduser) {
		this.pwduser = pwduser;
	}

	@Column(name = "enableduser", nullable = false)
	public int getEnableduser() {
		return this.enableduser;
	}

	public void setEnableduser(int enableduser) {
		this.enableduser = enableduser;
	}

	
	@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "tuserrole", 
    	joinColumns = @JoinColumn(name = "iduser"), 
    	inverseJoinColumns = @JoinColumn(name = "idrole"))
	@JsonIgnore
    private Set<Trole> roles = new HashSet<>();
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tuser")
	@JsonIgnore
	public Set<Tuserrole> getTuserroles() {
		return this.tuserroles;
	}

	public void setTuserroles(Set<Tuserrole> tuserroles) {
		this.tuserroles = tuserroles;
	}

	@Override
	@Transient
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Set<GrantedAuthority> authorities = new HashSet<>();
		tuserroles.forEach(ur -> authorities.add(new Authority(ur.getTrole().getNamerole())));
		
		return authorities;
	}

	@Override
	@Transient
	public String getPassword() {
		return pwduser;
	}

	@Override
	@Transient
	public String getUsername() {
		return loginuser;
	}

	@Override
	@Transient
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@Transient
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	@Transient
	public boolean isCredentialsNonExpired() {

		return true;
	}

	@Override
	@Transient
	public boolean isEnabled() {
		return enableduser==1;
	}

}
